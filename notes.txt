LOC
Sodoku.cpp 	--------- 716
Sodoku.h ------------ 116
test.cpp ------------ 928
main.cpp ------------ 210
Square_Matrix.h ----- 78
Square_Matrix.cpp --- 315
-------------------------
			   Total: 2363


------------------------------------------------------------
                   Example Output
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
Running self tests ...
All tests passed (74 assertions in 17 test cases)

Size of Sodoku puzzle: 9

This is your empty sodoku puzzle.
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |
| . . . . . . . . .  |

Lets fill 25% of it with some random yet valid starting cells.

         NOTE:
This partial fill does not guarantee to supply a valid puzzle.
So, this loop will try to find a solvable partially filled
puzzle by trying to actually solve it and if it can't solve
it, then it partially fills it again.
   Warning: If you set a large size(>7), this could take a while.

So far 50k steps have been taken, continue? [y/n]y
So far 500k steps have been taken, really continue? [y/n] n
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
So far 50k steps have been taken, continue? [y/n]y
So far 500k steps have been taken, really continue? [y/n] n
Found an unsolvable puzzle, making a new one...
So far 50k steps have been taken, continue? [y/n]y
So far 500k steps have been taken, really continue? [y/n] n
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
So far 50k steps have been taken, continue? [y/n]n
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
Found an unsolvable puzzle, making a new one...
Partially pre-filled puzzle.
| . . . . 1 . . . .  |
| . . 0 . . 5 . . .  |
| . . . . 6 . 5 . .  |
| . 1 . 7 . . . . .  |
| . 7 . . 3 . . 6 .  |
| 7 0 . 2 . 3 . . .  |
| . . . . 4 . . . .  |
| . 4 . . . 6 . . .  |
| 1 5 . . . . 2 . .  |

Solved puzzle
| 0 2 3 4 1 7 6 5 8  |
| 2 3 0 1 7 5 4 8 6  |
| 3 8 1 0 6 2 5 4 7  |
| 6 1 2 7 8 4 0 3 5  |
| 4 7 5 8 3 0 1 6 2  |
| 7 0 6 2 5 3 8 1 4  |
| 5 6 8 3 4 1 7 2 0  |
| 8 4 7 5 2 6 3 0 1  |
| 1 5 4 6 0 8 2 7 3  |

# of times a value was tried per cell.
|    1    3    4    5    0    8    7    6    9  |
|    3    4    0    2    8    0    5    9    7  |
|    4    9    2    1    0    3    0    5    8  |
|    7    0   23    0   89  255  401  644  566  |
|  305    0  666 1809    0 1461 2972    0 3063  |
|    0    0 2507    0 6816    0 6759 4272  775  |
|    6    7    9   14    0   12   28    3   11  |
|    9    0    8    6    3    0   14   11    2  |
|    0    0    5    7    1    9    0    8    4  |

Whew! That took 33680 steps!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                   Example Output
------------------------------------------------------------
